name: Code Sanitizers

on: [push, pull_request, workflow_dispatch]

jobs:
  linux_sanitizers:
    name: Linux [${{ matrix.SANITIZER }}] [${{ matrix.BACKEND }} | ${{ matrix.COMPILER }}]
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        BACKEND: [lmdb, rocksdb]
        COMPILER: [clang]
        SANITIZER: [ASAN, ASAN_INT, TSAN]
    runs-on: ubuntu-22.04
    outputs:
      issue_reported: ${{ steps.show_report.outputs.issue_reported }}
    env:
      COMPILER: ${{ matrix.COMPILER }}
      BACKEND: ${{ matrix.BACKEND }}
      TEST_USE_ROCKSDB: ${{ matrix.BACKEND == 'rocksdb' && '1' || '0' }}
      DEADLINE_SCALE_FACTOR: ${{ matrix.BACKEND == 'rocksdb' && '2' || '1' }}
      # XSAN: ${{ endsWith(matrix.sanitizer, 'ASAN_INT') && 'ASAN' || matrix.SANITIZER }}
      # XSAN_SUPPRESSIONS: ${{ endsWith(matrix.SANITIZER, 'TSAN') && 'suppressions=../tsan_suppressions:' || '' }}
      NANO_SANITIZER: ${{ matrix.SANITIZER }}
      ASAN_OPTIONS: log_exe_name=1:log_path=sanitizer_report
      TSAN_OPTIONS: log_exe_name=1:log_path=sanitizer_report:suppressions=../tsan_suppressions
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0 # Full history needed for restoring file timestamps

      # - name: Log XSan variable values
      #   run: |
      #     (
      #       echo "XSAN: '${XSAN}'"
      #       echo "XSAN_SUPPRESSIONS: '${XSAN_SUPPRESSIONS}'"
      #     )

      - name: Prepare
        run: sudo -E ci/prepare/linux/prepare.sh

      - name: Build Tests
        id: build
        run: ci/build-tests.sh

      # - name: Run core_test
      #   id: core_test
      #   continue-on-error: true
      #   run: docker run -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c \
      #     "cd /workspace/build && ${XSAN}_OPTIONS=${XSAN_SUPPRESSIONS}log_exe_name=1:log_path=sanitizer_report ./core_test"

      # - name: Run rpc_test
      #   id: rpc_test
      #   continue-on-error: true
      #   run: docker run -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c \
      #     "cd /workspace/build && ${XSAN}_OPTIONS=${XSAN_SUPPRESSIONS}log_exe_name=1:log_path=sanitizer_report ./rpc_test"

      - name: Core Tests
        if: steps.build.outcome == 'success' && (success() || failure())
        run: cd build && ../ci/tests/run-core-tests.sh

      - name: RPC Tests
        if: steps.build.outcome == 'success' && (success() || failure())
        run: cd build && ../ci/tests/run-rpc-tests.sh

      - name: Test Reports
        id: show_report
        if: steps.build.outcome == 'success' && (success() || failure())
        run: |
          (
            issue_reported=false
            reports=$(ls build/sanitizer_report*)
            if [[ -n "${reports}" ]]; then
              echo "Report Output:"
              for report in ${reports}; do
                echo "File: $report"
                cat "${report}"
                echo
              done
              issue_reported=true
            else
              echo "No report has been generated."
            fi
            echo "issue_reported=${issue_reported}" >> $GITHUB_OUTPUT
          ) || exit 0
